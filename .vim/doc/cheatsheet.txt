" vim: filetype=help foldmethod=marker modifiable noreadonly
*cheatsheet.txt* cheatsheet for this specific Vim configuration RubenLaguna



*CheatsheetOverview* *CheatsheetToc*


1. Editing this file |CheatsheetEdit|
2. Navigate Help |CheatsheetHelp|
3. Commands, operators and motions |CheatsheetCommands|
4. Completion / Autocompletion / Omnicompletion |CheatsheetCompletion|
5. Folding |CheatsheetFolding|
6. Troubleshooting vim / vimscript |CheatsheetTroubleshooting|
7. Vim plugins |CheatsheetPlugings|
8. Unite.vim |CheatsheetUnite|
9. XML editing |CheatsheetXml|
10. Miscellaneous |CheatsheetMisc|


==============================================================================
Editing this file                     *CheatsheetEdit* {{{1

http://vim.wikia.com/wiki/Add_your_note_files_to_Vim_help
http://vim.wikia.com/wiki/VimTip482

How to edit this help file, :set ma , to set it as modifiable |'ma'|

To see the "source code" of this file :set filetype=text |'filetype'|

To open this file you can :help cheatshee.txt, if it doesn't work is because
you need to build the helptags first :helptags ~/.vim/doc see |helptags|

:e $VIMRUNTIME/syntax/help.vim
:help write-local-help " |write-local-help|

How to insert a line full of ===== : in INSERT mode <C-o>78i=<Esc>

Related help topics
* |write-local-help|
* |help-tags|

==============================================================================
Navigate Help *CheatsheetHelp* {{{1

http://vim.wikia.com/wiki/Learn_to_use_help

Follow help links, put cursor in link and press Ctrl-]
Go back , Ctrl-O

Type :help help
Search all the help files with :helpgrep |helpgrep|
	:helpgrep \csearch.\{,12}file
where \c means case insensitive, the pattern looks for "search", then 12
character followe by "file"
To navigate the matches use :cnext |:cnext|, :cprev |:cprev|, :cnfile |:cnfile|,
:cpfile |:cpfile|, :cfirst |:cfirst| and even :cc |:cc|

 * :h :r          Ex command :r
 * :h r           normal mode
 * :h v_r         visual mode
 * :h i_CTRL-Wr   insert mode
 * :h c_CTRL-R    ex command line
 * :h /\r         search pattern
 * :h 'ro'        option
 * :h -r          vim argument

==============================================================================
Commands, operators and motions  *CheatsheetCommands* *CheatsheetOperators* *CheatsheetMotion*

|operator| plus |motion|

gUaw : uppercase word
gUap : uppercase whole paragraph
gUgU: uppercase line
gUU: uppercase line
dap: delete a paragraph
>>: indent line
>ap : indent paragraph
gcap: comment whole paragraph
gcG: comment from here to the end of the file
yie: yank complete file
yae: yank complete file
=ae: autoindent whole file
zz: center text on the middle line
J: join lines
|K|: search documentation
ga: show unicode value of character under cursor
g; and g, next and previous in change list :help |changelist| which is similar
          to the |jumplist|




Related Help:

* to create your own operators |:map-operator|
* to create your custom motions |omap-info|


insert mode tricks *CheatsheetInsert*

* <C-h> delete back one character
* <C-w> delete back one word
* <C-u> delete back to start of line
* <C-[> equivalent to <Esc> go back to Normal mode. See |i_CTRL-[|
* <C-o> switch to Insert Normal mode. (go back to insert after one normal
  command) Se |i_CTRL-O|
* <C-o>zz center text on the middle line without leaving insert
* <C-r>0 paster from last yanked text. See |registers|  and |quote0|
  and |i_CTRL-R|. This is susceptible to changes due to |'autoindent'| or
  |'textwidth'| . Use <C-r><C-p>0 to paste literally |i_CTRL-R_CTRL-P|
* To insert back-of-the-envelope calculations do <C-r>=20*40<cr> . You can
  evaluate any vimscript expression including function calls
* <C-v><Tab> insert a literal tab regardless of |'expandtab'|
* <C-v>u00bf insert unicode U+00bf ¿. See |i_CTRL-V_digit|
* <C-v>189 insert character by decimal code ½
* <C-k>12 to insert ½ . Or any |digraph| . See list with |:digraph| or
  |digraph-table|
*
>
================================================================================
Completion  *CheatsheetCompletion* *CheatsheetAutocompletion* {{{1

See Practical Vim chapter on autocompletion
https://www.safaribooksonline.com/library/view/practical-vim-2nd/9781680501629/f_0157.xhtml#chp.auto.completion

The Supertab, YouCompleteMe, VimCompleteMe, neocomplete, etc are for complete
as you type, without having to trigger the completion with a keystroke. If you
don't  mind to type |i_CTRL-N| or |i_CTRL-X_CTRL-N|

Autocompletion is triggered from |Insert-Mode with either |i_CTRL-N| or |i_CTRL-P|
both trigger generic keyword autocompletion.


Types of completion
* CTRL-N    Generic keywords |compl-generic|
* CTRL-X CTRL-N Current buffer keywords |compl-current| |i_CTRL-X_CTRL-N|
* CTRL-X CTRL-I Included file keywords |compl-keyword|
* CTRL-X CTRL-] tags file keywords |compl-tag|
* CTRL-X CTRL-K Dictionary lookup  |compl-dictionary|
* CTRL-X CTRL-L whole line completion |compl-whole-line|
* CTRL-X CTRL-F Filename completion |compl-filename|
* CTRL-X CTRL-O Omnicompletion |compl-omni|

Once the completion is invoked a popup will appear you can navigate with
CTRL-N and CTRL-P (which will modify the buffer) or with <Down> and <Up>
(which will select entries in the popup without modifying the document).

You need to CTRL-E will terminate the completion, dimisses the popup and
restores the text to the partial text that was typed before autocompletion was
invoked.

To invoke the autocompletion just to see the proposals and refine by typing
use CTRL-N CTRL-P the CTRL-N selects the first completion and CTRL-P bring
back to the partial text so you can continue typing there. This works for the
other types of completions as well CTRL-X CTRL-N CTRL-P for example.

The Generic keyword autocompletion |compl-generic| merges several sources ,
which sources are used is controlled by the option |'complete'|
>     :set complete=.,w,b,u,t,k~/.vim/keywords.txt
>
When we use autocomplete to expand a word if we invoke autocomplete a second
time it will insert the word that followed the original completion, that
allows to autocomplete not just words but parts of sentences incrrementally.

The file autocompletion |compl-filename| exapnds paths relative to the
_current directory_ not relative to the file currently being edited. Use
|:pwd| to see what is the curren directory and |:cd|  and |:cd-| to change
directories before doing the CTRL-X CTRL-L. In the future maybe the |'path'|
option will be used.

Omni-completion is triggred by CTRL-X CTRL-O (see |compl-omni|) the
functionality is filetype dependent see |compl-omni-filetypes| (see the
specific help for each filetype |ft-c-omni|, |ft-php-omni|,
|ft-php-omni|, etc). You can figure out how to write your own omni-completion
plugins by reading the |complete-functions| (|omnifunc| and |completefunc|)
>
as an example of how a new complete is implemented look at the |vim-go|
see ˜/.vim/autoload/go/complete.vim which implements the function
> function! go#complete#Complete(findstart, base) abort
which follows the conventions of |complete-functions|.
It really uses s:gocodeAutocomplete() to generate the completions that it
stores in g:gocomplete_completions.
g:gocodeAutocomplete calls gocode autocomplete --in=tempfilename -f=vim fullpath_to_buffer.go offset
expand('%:p')
It uses |tempname()| to generate a temporary filename
the offset is calculated using |line()| and |col()|, but to account for utf-8
encoding it does


Related vim help:
 * |'infercase'|
 * |ins-completion|
 * |popupmenu-completion|
 * |compl-current|
 * |compl-keyword|
 * |include|
 * |compl-tag|
 * |compl-dictionary|
 * |dictionary|
 * |compl-whole-line|
 * |compl-filename|
 * |:cd| and |:cd-|
 * |compl-omni|
 * |complete-functions| (|omnifunc| and |completefunc|)
 * |CompleteDone| autocommand event

==============================================================================
Folding *CheatsheetFolding* *CheatsheetFold* {{{1

|zi| disable all folding
|za| toggle fold (open/close fole). <Space> is mapped to za
zA toggle all folds (open all thaw were closed and close the open ones)
|zc| close a fold
zo open a fold
|zM| close all folds
|zR| will open all folds
zO will open all fold inside the current fold recursively
zC will close folds recusively
|zv| open the fold necesarry to reveal the cursor
zm close one foldlevel
zr open a foldlevel
zj navigate to next fold
zk navigate to previous fold
zMzv close all fold except the current one
zMzvzz Refocus, like previous but center view

Writing a custom folding expression / function
http://vimcasts.org/episodes/writing-a-custom-fold-expression/
> set foldcolumn=3 "numer of characters in the gutter to show fold bars"
> set foldmethod=marker "you need to add \{\{{1 \{\{{2 etc to the file
> set foldmethod=indent "fold based on indentation"
> set foldmethod=expr  "fold based on |'foldexpr'|, set 'foldexpr' to a func
>                      " that returns ">1", "=", ">3", etc|

Manual folds
You need to set |foldmethod| to manual
> set fdm=manual
then do a visual selection like Vjjj<Esc>  the you can use |zf| to create a
fold (using the current visual selection) that you can open via |zo| and close
with |zc|
THe folds will be lost when the buffer is closed but you can save them with
|:mkview| and recovered with |:loadview|


Related help
* |folding|
* |'foldlevel'|
* |'foldmethod'|
* |'foldcolumn'|


==============================================================================
Troubleshooting Vim *CheatsheetTroubleshooting* {{{1

|:messages|  show error messages from vim from previous commands
|:set| buftype
|:echo| &buftype

To see from which file an options was set use |:set-verbose| see also
|:verbose|
:verbose set shiftwidth cindent?

==============================================================================
Plugins *CheatsheetPlugings* {{{1


* unite.vim
* Tabular
* EasyAlign
* |vim-go|


vim-go plugin for Golang development *CheatsheetGo*  *CheatsheetVimGo*
*CheatsheetVimgo* {{{2

See vim-go-tutorial at
https://github.com/fatih/vim-go-tutorial/blob/master/README.md

To learn about the configuration settings of |vim-go| :help |go-settings|


First do |:GoInstallBinaries| or |:GoUpdateBinaries| so that guru, gofmt,
gorename, godef, goimports, etc are installedi.

|:GoRun| to run small scripts
|:GoBuild| this compiles the filed instead of running it. No binaries pollute
the dir, it cds into the source pkg , parses errors into quickfix, uses
|dispatch| plugin or vim 8 async api in the future

The |:GoBuild| works better with |autowrite|
> set autowrite


Many commands like |:GoBuild|, |:GoRun|, |:GoInstall|, |:GoTest| use the
|quickfix| window, so it makes sense to add some mappings for quick |:cnext|
and |:cprevious|
> map <C-n> :cnext<CR>
> map <C-m> :cprevious<CR>
> nnoremap <leader>a :cclose<CR>

To load specific settings for Go files you can use
> autocmd FileType go nmap <leader>b <Plug>(go-build)
> autocmd FileType go nmap <leader>r <Plug>(go-run)
> autocmd FileType go nmap <leader>t <Plug>(go-test)
but I put everything in ~/.vim/ftplugin/go/go.vim


The vim-go uses both |location-list| (one for Build errors, another for Tests,
etc)  and |quickfix|. But we can make vim-go to only use quickfix with
> let g:go_list_type = "quickfix"


|:GoTest| runs synchronously but there is timeout of 10s
> let g:go_test_timeout = '10s'


|:GoTestFunc| only tests the function that is under the cursor. The errors
will open in a |quickfix|  window.

|:GoTestCompile| builds the test file without running it, in case it takes
long to run and you only want to how if your changes compiles.

vim-go provides autocompletion direclty via CTRL-X CTRL-O (if you want as you
type completion without having to trigger it with a chord you need
YouCompleteMe, Supertab, neocomplete, etc.)

|:GoCoverage| and |:GoCoverageClear| and |:GoCoverageClear| and
|:GoCoverageBrowser| . The test must pass to get coverage
The <leader>c will run |:GoCoverageToggle|

The command |:GoImport|  allows to add a import line at the top of the file
without having to jump there
> :GoImport strings
> :GoImportAs str strings
To remove an import statement use |:GoDrop|
> :GoDrop string
>
But we have the goimports tool, we can instruct vim-go to run goimports to
"format" the code (instead of using "gofmt")
> let g:go_fmt_command = "goimports"

Running goimports on save may be slow so you can revert
> let g:go_fmt_command = "gofmt"
and run goimports on demands with |:GoImports| (note the extra s)

vim-go provides the |text-objects| af and if, so you can do vaf , vif , daf,
dif, yif, yaf, etc. This text objects include the comments (documentation) if
you don't like that you can use the setting:
> let g:go_textobj_include_function_doc = 0

See more about the text-objects at https://medium.com/@farslan/treating-go-types-as-objects-in-vim-ed6b3fad9287#.45q2rtqgf

the |gS| and |gJ| from the splitjoin.vim can be used to split expression
althought is not really a go-aware plugin.

There are some go related *UltiSnips* snippets
https://github.com/fatih/vim-go/blob/master/gosnippets/UltiSnips/go.snippets

* fn -> fmt.Println
* ff -> fmt.Printf()
* ln -> log.Println()
* lf -> log.Printf()
* errp -> if err != nil


Syntax highlighting can slow down vim so you can have total control of what is
syntax highlighted
> let g:go_highlight_types = 1
> let g:go_highlight_types = 1
> let g:go_highlight_fields = 1
> let g:go_highlight_functions = 1
> let g:go_highlight_methods = 1
> let g:go_highlight_operators = 1
> let g:go_highlight_extra_types = 1
> let g:go_highlight_build_constraints = 1
> let g:go_highlight_generate_tags = 1
>
To change the |textwidth| and |tabstop| for all go files
> autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4


There are several commans to check the code |:GoLint| , |:GoVet| and
|:GoMetalinter| , metalinter is the obvious choice because it runs the other
two and present the results in an uniform way. (golint, go vet and errcheck)
> let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']
>
>
To navigate to the alternatefile (test) use |:GoAlternate|

Navigation  *CheatsheetGoNav* *CheatsheetGoCommands*

*  |:GoAlternate| to go to test file
*  |:GoDef| Go to definition there is the gd and CTRL-]
*  |:GoDefPop| Go to previous definition CTRL-T
*  |:GoDefStack| and |:GoDefStackClear| to navigate to all previous
   definitions
*  |:GoDecls| and |:GoDeclsDir| are not enabled unless you have ctrlp.vim
   plugin
* ]] jumps to next function
* [[ jumps to previous function
* |:GoDoc| show documentation for the identifier under cursor, it uses
  gogetdoc tool, you can use |K| in normal mode to trigger :GoDoc
* install go-explorer to do documentattion exploring :GoDoc doesn't allow to
  explore documentation (no links among pages)
* To know what a function acceps and returns use |:GoInfo| or the mapping
  <leader>i
* The g:go_auto_type_info is enabled so when the |CursorHold|  event triggers
  (after keeping the cursor in the same oposition for |'updatetime'| ms ) then
  :GoInfo will be called and shown under the |status-line|
* To highlight an identifier use |:GoSameIds| and |:GoSameIdsClear|
* Use |:GoFiles|  to  show all the files that make a package
* Use |:GoDeps| to show all the dependencies
* |:GoDescribe| is similar to |:GoInfo|
* |:GoImplements|  tells you what interfaces the identifier is implementing
* |:GoImpl| m *MyType io.ReadWriterCloser will generate method stubs for type
  *MyType that will panic
* |:GoWhicherrs| will tells what kind of values can an error type have
  (constants, concrete types) so you can do type discrimination when handling
  the error.
* |:GoChannelPeers|  on a expression like ch <- n will populate the |quickfix| window
  with information about where the channel was allocated, and points where the
  channel is being used to send or received
* |:GoCallees| shows possible call targets of a selected function call (who)
* |:GoCallers|
* |:GoCallstack|
* All the commands that rely on guru (like :GoDecribe, :GoImplements,
  GoWhicherrs, GoChannelPeers, :goCallees, :GoCallers, :GoCallstack) rely on
  the guru scope that can be set with |:GoGuruScope| and
  > let g:go_guru_scope
* |:GoRename|  uses the gorename tool. put the cursor on top of what you want
  to rename as :GoRename newname
* Extract a function/method with |:GoFreevars| which relies on the gofreevars
  tool. Do a visual selection :GoFreevars it will show you all the variables
  that need to be converted into parameters of the function
* |:GoGenerate|  will call go generate


vim-unimpaired *CheatsheetUnimpaired* {{{2

The official help is :help |unimpaired|

]b  |:bprevious| previous buffer
[b  |:bnext| next buffer
[q  |:cprevious|  next entry in |quickfix-window|
]q  |:cnext|  next entry in |quickfix-window|
[l  |:lprevious| previous entry in |location-list-window|
]l  |:lnext| next entry in |location-list-window|



==============================================================================

Unite.vim keyboard shortcuts *CheatsheetUnite* {{{1

The |unite.vim| are buffer so you can CTRL-^ to go back where you came from

<Leader> is \

In normal mode:
CTRL-P open the file browser
<Leader>mru to open a list of the Most Recently Used filed
<Leader>o   Outline
<Leader>t   Tags
<Leader>y   Yank. We don't have it configured properly I guess we need another
            plugin called https://github.com/Shougo/neoyank.vim
<Leader>e   Open buffers, you have to wait for the timeout (see |timeout|,
            |ttimeout|, |ttimeoutlen|) because it needs to distinguish
            between <Leader>e and <Leader>ev (open vimrc file)
<Leader>g   Grep
<Leader>l   Resume |:UniteResume|


Related Help:
* How to add new sources |unite-create-source|
*



==============================================================================
XML editing *CheatsheetXml*

* https://www.pinkjuice.com/howto/vimxml/setup.xml


==============================================================================
Miscellaneous *CheatsheetMisc* {{{1

Create a new command with
>  :command :helptags ~/.vim/doc | :help Cheatsheet

The above creates a new command :Cheatsheet that will run :helptags and then
:help

|expand()| allows to get
* expand('%:p')  full path of current buffer



Vim script / VimScript variable scopes: http://learnvimscriptthehardway.stevelosh.com/chapters/20.html
* scopes are explained in |internal-variables|
* |a:var|  is the |function-argument| scope
* |g:var| is the  |global-variable| scope  |g:var| |g:|
*

|mapleader|  the default leader is \ , but it's more convenient to change it
to the "," although that will prevent from searching backwards
> let mapleader = ','
>

To execute command per filetype
|filetype-plugins|	Documentation for the filetype plugins and information
			about how to avoid that mappings cause problems.
|load-plugins|		When the global plugins are loaded during startup.
|ftplugin-overrule|	Overruling the settings from a global plugin.
|write-plugin|		How to write a plugin script.
|plugin-details|	For more information about using plugins or when your
			plugin doesn't work.
|new-filetype|		How to detect a new file type.


See |Operator-pending-mode|


To insert special characters use
* |i_CTRL-V|  like i<C-v><Tab> will insert a literal tab (ignoring |'expandtab'|)
* Using the |digraphs| . Use |:digraphs| to show the available digraphs. To
  insert use |i_digraphs| in insert mode <C-k>12 -> ½


==============================================================================
Navigation shortcuts *CheatsheetNavigation*

g; next in |changelist|
g, previous in |changelist|
<C-o> previous in |jumplist|
<C-i> next in |jumplist|
[q previous in |quickfix-window| thanks to |unimpaired|
]q next in |quickfix-window| thanks to |unimpaired|
[Q first entry in |quickfix-window|

Related help
* |changelist|
* |jumplist|
* |quickfix|
* |quickfix-window|
* |location-list|
* |location-list-window| (|:lmake|, |:lgrep|)
*

==============================================================================
Window management *CheatsheetWindow*

windows, panes, tabs, 


<C-w>w     switch to window to the right or below |CTRL-W_w|
<C-w><C-w> switch to another window
<C-w>p     switch to previous (last used) window |CTRL-W_p| |CTRL-W_CTRL-P|
<C-w><C-p> switch to previous (last used) window |CTRL-W_p| |CTRL-W_CTRL-P|
<C-w>x
<C-w><C-x>  Exchange current window with next one (or previously used one)
            see |CTRL-W_x| |CTRL-W_CTRL-X|

Related help
* |window-move-cursor|
* |window-moving|
