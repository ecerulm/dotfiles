#########################
# SNIPPETS for SNIPPETS #
#########################

# We use a little hack so that the snippet is expanded
# and parsed correctly
snippet snip "Snippet definition" !
`!p snip.rv = "snippet"` ${1:Tab_trigger} "${2:Description}" ${3:!b}
$0
`!p snip.rv = "endsnippet"`
endsnippet

snippet global "Global snippet" !
`!p snip.rv = "global"` !p
$0
`!p snip.rv = "endglobal"`
endsnippet

snippet vis "${VISUAL}" i
\$\{VISUAL${1:${2:default}${3:/transform/}}\}
endsnippet

snippet alias "alias for another snippet" !b
`!p snip.rv = 'post_jump "expand(snip)"'`
`!p snip.rv = "snippet"` ${1:Tab_trigger} "${2:Description}" ${3:!b}
${4:othersniptrigger}`!p snip.rv = "$1"`
`!p snip.rv = "endsnippet"`
$0
endsnippet

snippet header "Description" !b
# https://github.com/honza/vim-snippets/blob/master/UltiSnips/java.snippets

# the vim-go plugins also contribute snippets to the go filetype from
# ~/.vim/bundle/vim-go/gosnippets/UltiSnips/go.snippets
# put the cursor over the filename and type gf to go to that file

# What does the !b means for ultisnips :help UltiSnips-snippet-options
# b   Beginning of line
# i   In-word expansion
# w   Word boundary
# r   Regular expression
# t   Do not expand tabs
# s   Remove whitespace immediately before the cursor at the end of a line
# m   Trim all whitespaces from right side of snippet lines. Useful when
# e   Context snippets
# A   Snippet will be triggered automatically, when condition matches.

global !p
from ultisnips_helpers import *
endglobal

# post_jump "expand(snip)"
# snippet httphandler "func xxxx(w http.ResponseWriter, req *http.Request" !b
# handler$1
# endsnippet

endsnippet

# vim:ft=snippets:
