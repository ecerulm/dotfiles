# What does the !b means for ultisnips :help UltiSnips-snippet-options
# b   Beginning of line
# i   In-word expansion
# w   Word boundary
# r   Regular expression
# t   Do not expand tabs
# s   Remove whitespace immediately before the cursor at the end of a line
# m   Trim all whitespaces from right side of snippet lines. Useful when
# e   Context snippets
# A   Snippet will be triggered automatically, when condition matches.
# !b  I don't have any idea what the ! means

global !p
from ultisnips_helpers import *
endglobal


# use this to implement aliases for snippets
# post_jump "expand(snip)"
# snippet curfile "current file path" !b
# basedir$1
# endsnippet

snippet buildGroovy "basic groovy build script" !b

apply plugin: 'groovy'

repositories {
  mavenCentral()
}

dependencies {
  compile 'org.codehaus.groovy:groovy-all:2.4.12'
  testCompile 'junit:junit:4.12'
}

// it will compile the code in src/main/groovy/com/package/*
// it will compile tests in    src/test/groovy/com/package/*
// you can have resources in   src/main/resources 
//                             src/test/resources

endsnippet


snippet buildJava "basic java build script" !b

apply plugin: 'java'

repositories {
  mavenCentral()
}

dependencies {
  // compile 'org.codehaus.groovy:groovy-all:2.4.12'
  compile "org.slf4j:slf4j-api:1.7.25"
  runtime "org.slf4j:slf4j-log4j12:1.7.25"
  runtime "log4j:log4j:1.2.17"
  testCompile 'junit:junit:4.12'
}

// it will compile the code in src/main/groovy/com/package/*
// it will compile tests in    src/test/groovy/com/package/*
// you can have resources in   src/main/resources 
//                             src/test/resources

endsnippet

snippet junit "create junit class" !b
import org.junit.Test

import static groovy.test.GroovyAssert.shouldFail // capture exception

class ${1:JUnit4ExampleTests} {
  @Test
  void ${2:indexOutOfBoundsAccess}() {
    $0
    def numbers = [1,2,3,4]
    shouldFail {
      numbers.get(4)
    }
  }
}
endsnippet

snippet invokelater "SwingUtilities.invokeLater(..)" !b
SwingUtilities.invokeLater(new Runnable() {
  public void run() {
    // code that should run on the EDT
    $0
  }
});

endsnippet

snippet importswingbuilder "import x.y.z.SwingBuilder" !b
import groovy.swing.SwingBuilder
$0
endsnippet

# snippet frame "new SwingBuilder().frame()" !b
# // wrap this in a method (possible static) and call it
# // with SwingUtilties.invokeLater
# def swing = new SwingBuilder()
# def frame = swing.frame(title: 'frame title') {
#     passwordField(columns:10, actionPerformed: { event ->
# 	println event.source.text
# 	System.exit(0)
# 	}
#     )
# }
# frame.pack()
# frame.visible = true
# endsnippet

snippet frameclose "frame.defaultCloseAction" !b
frame.defaultCloseOperation = javax.swing.JFrame.EXIT_ON_CLOSE
endsnippet

snippet panelbuttons "JPanel with buttons" !b
panel(layout: new BL()) {
    button(constraints: BL.NORTH, 'North')
    button(constraints: BL.SOUTH, 'South')
    button(constraints: BL.EAST, 'East')
    button(constraints: BL.WEST, 'West')
    button(constraints: BL.CENTER, 'Center')
}
$0
endsnippet

snippet main "static void main(String... args) {...}" !b
static void main(String... args) {
  ${0:println 'Hello world!'}
}
endsnippet

snippet testcaseparam "parameterized GroovyTestCase" b!
import org.junit.Test
import org.junit.runner.RunWith
import org.junit.runners.Parameterized
import org.junit.runners.Parameterized.Parameters

@RunWith(Parameterized)
class ${1:MyParameterizedGroovyTestCase} extends GroovyTestCase {
  @Parameters static scenarios() {[ // those become parameters for the constructor
        ['param1value', "param2value", "myexpectedvalue"],
        ['param1value', "param2value", "myexpectedvalue"],
    ]*.toArray()}

    //
    public $1(String param1, String param2, String expected) {
      // set some fields using the constructor parameters
    }


    @Test void myTestCase1() {
        // run test using the fields (populated from the constructor parameters)
        // do assertion as usual , all the test methods will be run for each scenario
        assert count == this.expectedOcurrences
    }
}
endsnippet

snippet importgroovyshell "imports for GroovyShell, CompilerConfiguration, etc" !b
import org.codehaus.groovy.control.CompilerConfiguration
import org.codehaus.groovy.control.customizers.ImportCustomizer
import org.codehaus.groovy.tools.FileSystemCompiler
endsnippet

snippet saxparser "Minimal SAX parser" !b
import javax.xml.parsers.SAXParserFactory
import org.xml.sax.*
import org.xml.sax.helpers.DefaultHandler


class CountHandler extends DefaultHandler {
  int count = 0

  @Override
  void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
  count++
  }
}

def counter = new CountHandler()

def factory = SAXParserFactory.newInstance()
def reader = factory.newSAXParser().XMLReader
reader.contentHandler = counter

new File("./plan.xml").withInputStream {
reader.parse(new InputSource(it))
}

println counter.count
endsnippet

snippet mapdefault "map with default value"
[:].withDefault { key -> key * 2 }
endsnippet

snippet saxnodtd "Description" !b
factory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
endsnippet


snippet mapsort "map sort by closure" w
sort { e1, e2 -> e1.key <=> e2.key}
endsnippet

snippet swingmain "Swing main createAndShowUI" !b
// put this in public static main
SwingUtilities.invokeLater(new Runnable() {
  public void run() {
    new MyJFrame().setVisible(true) // or createAndShowUI()
  }
});
endsnippet

snippet swingcreategui "Description" !b
private static void createAndShowGUI() {
  //  http://groovy-lang.org/swing.text
  Integer count = 0
  new SwingBuilder().edt {
    frame(title: 'Frame', size: [300,300], defaultCloseOperation: JFrame.EXIT_ON_CLOSE,
      pack: true, show: true) {
      borderLayout()
      textlabel = label(text: 'Click the button!', constraints: BL.NORTH)
      button(text: 'Click me',
        actionPerformed: {count++; textlabel.text = "Clicked ${count} time(s)."; println 'Clicked'},
        constraints: BL.SOUTH)
    }
  }
}
endsnippet

snippet importswing "import swinbuilder, borderlayout, etc" !b
import groovy.swing.SwingBuilder
import java.awt.BorderLayout as BL
import java.awt.Component
import javax.swing.JFrame
import javax.swing.JLabel
import javax.swing.JComponent
import java.awt.Graphics
import java.awt.Color
import javax.swing.SwingUtilities
import javax.swing.*
import javax.swing.event.*
import java.awt.dnd.*
import javax.activation.*
import java.awt.datatransfer.*

endsnippet

snippet label "swingbuilder JLabel" !b
label(text: 'text', constraints: BL.NORTH)
endsnippet

snippet paintcomponent "paintComp" !b
protected void paintComponent(Graphics g) {
  // Erase the background
  g.setColor(Color.WHITE)
  g.fillRect(0,0, getWidth(), getHeight());
}
endsnippet

snippet set "setter method" !b
public void set${1:PropertyName}(${2:PropertyType} newValue) {
  // this.$1 = newValue
  $0
}
endsnippet


snippet passwordfield "swingbuilder password field example" !b
import groovy.swing.SwingBuilder

swing = new SwingBuilder()
frame = swing.frame(title: 'Password') {
  passwordField(columns: 10, actionPerformed: { event ->
    println event.source.text
    System.exit(0)
    }
  )
}

frame.pack()
frame.visible = true

endsnippet

snippet swingbuilder "def swing = new SwingBuilder()" !b
def swing = new groovy.swing.SwingBuilder()
$0
endsnippet

post_jump "expand(snip)"
snippet swing "alias of swingbuilder" !b
swingbuilder$1
endsnippet

snippet frame "swing.frame" !b
def frame = swing.frame(title: '$1', defaultCloseOperation: javax.swing.JFrame.EXIT_ON_CLOSE) {
  $0
}
frame.pack()
frame.visible = true
endsnippet

snippet menubar "menubar{}" !b
menuBar {
  menu('File') {
    menuItem 'New'
    menuItem 'Open'
  }
}
endsnippet

snippet panel "panel {...}" !b
panel {
  label 'Label 1'
  slider()
  comboBox(items['one', 'two', 'three'])
}
endsnippet

snippet vbox "swing vertical box" !b
vbox {
  button 'one'
  button 'two'
}
endsnippet

snippet table "swing jframe layout" !b
tableLayout {
  tr {
    td { button 'one' }
    td { button 'two' }
  }
  tr {
    td(colspan:2) { button 'three' }
  }
}
endsnippet

snippet action "swing action" !b
def ${1:printAction} = swing.action(
  name:'$2',
  closure: { println swing.message.text },
  mnemonic: '$3',
  accelerator: '$4'
)
endsnippet

snippet scrollpane "swing scrollPane {...}" !b
scrollPane {
  table(id: 'table') {
    tableModel(list: data) {
      propertyColumn(header: 'Name', propertyName: 'name')
      propertyColumn(header: 'Color', propertyName: 'color', type: NamedColor)
    }
  }
}
endsnippet

snippet importcanonical "import " !b
import groovy.transform.Canonical
endsnippet

snippet ISE "IllegalStateException" w
IllegalStateException
endsnippet

snippet listmodel "Description" !b
javax.swing.ListModel<${1:String}> model = new javax.swing.DefaultListModel()
endsnippet

snippet listdatalistener "Description" !b
void contentsChanged(ListDataEvent e) {
}

void intervalAdded(ListDataEvent e) {
}

void intervalRemoved(ListDataEvent e) {
}

endsnippet


snippet dragsource "make component draggable" !b
DragSource ds = new DragSource()
DragGestureRecognizer dgr = ds.createDefaultDragGestureRecognizer(${1:theButton}, DnDConstants.ACTION_COPY) { dge ->
    println 'drag recognized'
    def transferable = new DataHandler(datatotransfer, somemimetype)
    dge.startDrag(DragSource.DefaultCopyDrop, transferable)
}
endsnippet

snippet droptarget "make component receive drop" !b
DropTarget dt = new DropTarget()
dt.setComponent(${1:theComponent})
dt.addDropTargetListener(new DropTargetAdapter() {
  @Override
  public void drop(DropTargetDropEvent dtde) {
    $0
    dtde.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE)
    dtde.dropComplete(true)
  }
})
endsnippet
