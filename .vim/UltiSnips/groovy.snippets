# What does the !b means for ultisnips :help UltiSnips-snippet-options
# b   Beginning of line
# i   In-word expansion
# w   Word boundary
# r   Regular expression
# t   Do not expand tabs
# s   Remove whitespace immediately before the cursor at the end of a line
# m   Trim all whitespaces from right side of snippet lines. Useful when
# e   Context snippets
# A   Snippet will be triggered automatically, when condition matches.

global !p
from ultisnips_helpers import *
endglobal


# use this to implement aliases for snippets
# post_jump "expand(snip)"
# snippet curfile "current file path" !b
# basedir$1
# endsnippet

snippet buildGroovy "basic groovy build script" !b

apply plugin: 'groovy'

repositories {
  mavenCentral()
}

dependencies {
  compile 'org.codehaus.groovy:groovy-all:2.4.12'
  testCompile 'junit:junit:4.12'
}

// it will compile the code in src/main/groovy/com/package/*
// it will compile tests in    src/test/groovy/com/package/*
// you can have resources in   src/main/resources 
//                             src/test/resources

endsnippet


snippet buildJava "basic java build script" !b

apply plugin: 'java'

repositories {
  mavenCentral()
}

dependencies {
  // compile 'org.codehaus.groovy:groovy-all:2.4.12'
  compile "org.slf4j:slf4j-api:1.7.25"
  runtime "org.slf4j:slf4j-log4j12:1.7.25"
  runtime "log4j:log4j:1.2.17"
  testCompile 'junit:junit:4.12'
}

// it will compile the code in src/main/groovy/com/package/*
// it will compile tests in    src/test/groovy/com/package/*
// you can have resources in   src/main/resources 
//                             src/test/resources

endsnippet

snippet junit "create junit class" !b
import org.junit.Test

import static groovy.test.GroovyAssert.shouldFail // capture exception

class ${1:JUnit4ExampleTests} {
  @Test
  void ${2:indexOutOfBoundsAccess}() {
    $0
    def numbers = [1,2,3,4]
    shouldFail {
      numbers.get(4)
    }
  }
}
endsnippet

snippet invokelater "SwingUtilities.invokeLater(..)" !b
SwingUtilities.invokeLater(new Runnable() {
  public void run() {
    // code that should run on the EDT
    $0
  }
});

endsnippet

snippet importswingbuilder "import x.y.z.SwingBuilder" !b
import groovy.swing.SwingBuilder
$0
endsnippet

snippet frame "new SwingBuilder().frame()" !b
// wrap this in a method (possible static) and call it
// with SwingUtilties.invokeLater
def swing = new SwingBuilder()
def frame = swing.frame(title: 'frame title') {
    passwordField(columns:10, actionPerformed: { event ->
	println event.source.text
	System.exit(0)
	}
    )
}
frame.pack()
frame.visible = true
endsnippet

snippet frameclose "frame.defaultCloseAction" !b
frame.defaultCloseOperation = javax.swing.JFrame.EXIT_ON_CLOSE
endsnippet

snippet panelbuttons "JPanel with buttons" !b
panel(layout: new BL()) {
    button(constraints: BL.NORTH, 'North')
    button(constraints: BL.SOUTH, 'South')
    button(constraints: BL.EAST, 'East')
    button(constraints: BL.WEST, 'West')
    button(constraints: BL.CENTER, 'Center')
}
$0
endsnippet

snippet main "static void main(String... args) {...}" !b
static void main(String... args) {
  ${0:println 'Hello world!'}
}
endsnippet

snippet testcaseparam "parameterized GroovyTestCase" b!
import org.junit.Test
import org.junit.runner.RunWith
import org.junit.runners.Parameterized
import org.junit.runners.Parameterized.Parameters

@RunWith(Parameterized)
class ${1:MyParameterizedGroovyTestCase} extends GroovyTestCase {
  @Parameters static scenarios() {[ // those become parameters for the constructor
        ['param1value', "param2value", "myexpectedvalue"],
        ['param1value', "param2value", "myexpectedvalue"],
    ]*.toArray()}

    //
    public $1(String param1, String param2, String expected) {
      // set some fields using the constructor parameters
    }


    @Test void myTestCase1() {
        // run test using the fields (populated from the constructor parameters)
        // do assertion as usual , all the test methods will be run for each scenario
        assert count == this.expectedOcurrences
    }
}
endsnippet

snippet importgroovyshell "imports for GroovyShell, CompilerConfiguration, etc" !b
import org.codehaus.groovy.control.CompilerConfiguration
import org.codehaus.groovy.control.customizers.ImportCustomizer
import org.codehaus.groovy.tools.FileSystemCompiler
endsnippet

snippet saxparser "Minimal SAX parser" !b
import javax.xml.parsers.SAXParserFactory
import org.xml.sax.*
import org.xml.sax.helpers.DefaultHandler


class CountHandler extends DefaultHandler {
  int count = 0

  @Override
  void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
  count++
  }
}

def counter = new CountHandler()

def factory = SAXParserFactory.newInstance()
def reader = factory.newSAXParser().XMLReader
reader.contentHandler = counter

new File("./plan.xml").withInputStream {
reader.parse(new InputSource(it))
}

println counter.count
endsnippet

snippet mapdefault "map with default value"
[:].withDefault { key -> key * 2 }
endsnippet

snippet saxnodtd "Description" !b
factory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
endsnippet


snippet mapsort "map sort by closure" w
sort { e1, e2 -> e1.key <=> e2.key}
endsnippet
