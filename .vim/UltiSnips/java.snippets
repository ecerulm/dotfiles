# https://github.com/honza/vim-snippets/blob/master/UltiSnips/java.snippets

# the vim-go plugins also contribute snippets to the go filetype from
# ~/.vim/bundle/vim-go/gosnippets/UltiSnips/go.snippets
# put the cursor over the filename and type gf to go to that file

# What does the !b means for ultisnips :help UltiSnips-snippet-options
# b   Beginning of line
# i   In-word expansion
# w   Word boundary
# r   Regular expression
# t   Do not expand tabs
# s   Remove whitespace immediately before the cursor at the end of a line
# m   Trim all whitespaces from right side of snippet lines. Useful when
# e   Context snippets
# A   Snippet will be triggered automatically, when condition matches.

global !p
from ultisnips_helpers import *
endglobal

# post_jump "expand(snip)"
# snippet httphandler "func xxxx(w http.ResponseWriter, req *http.Request" !b
# handler$1
# endsnippet

snippet pc "public class XXXX {...}" !b
public class ${1:HelloWorld} {
	$0
}
endsnippet

snippet psvm "public static void main(String[] args)" !b
public static void main(String[] args) {
	$0
}
endsnippet

snippet sol "System.out.println" w
System.out.println($1);$0
endsnippet

post_jump "expand(snip)"
snippet pl "println" !b
sol$1
endsnippet

snippet importdate "import all date related packages" !b
import java.time.format.DateTimeFormatter;
import java.time.OffsetDateTime;
endsnippet

snippet main "Write Main class"

public class Main {
	public static void main(String[] args) {
		System.out.println("Hello World");
	}
}
endsnippet

snippet unittest "JUnit 4 TestCase" !b
import org.junit.*;
import statis org.junit.Assert.*;

public class MyTest {
	@Test
	public void mytest() {
		assertTrue(true);
	}
}
endsnippet

snippet logger "SLF4J logger" !b
static Logger log = LoggerFactory.getLogger(MyClass.class);
endsnippet

snippet importslf4j "import slf4j" !b
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
endsnippet

snippet interface "public interface {...}" !b
public interface ${1:MyInterface} {
	$0
}
endsnippet

snippet javadoc "/** .." !b
/**
 * ${1:Gets the label}.
 * 
 * @param  list the list to be searched.
 * @param  key the key to be searched for.
 * @return the index of the search key, if it is contained in the list;
 *         otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
 *         <i>insertion point</i> is defined as the point at which the
 *         key would be inserted into the list: the index of the first
 *         element greater than the key, or <tt>list.size()</tt> if all
 *         elements in the list are less than the specified key.  Note
 *         that this guarantees that the return value will be &gt;= 0 if
 *         and only if the key is found.
 * @throws ClassCastException if the list contains elements that are not
 *         <i>mutually comparable</i> (for example, strings and
 *         integers), or the search key is not mutually comparable
 *         with the elements of the list.
 */

endsnippet

snippet importswing "Description" !b
import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;
import java.awt.dnd.*;
import javax.activation.*;
import java.awt.datatransfer.*;


endsnippet

snippet guiinit "Description" !b
SwingUtilities.invokeLater(new Runnable() { 
	@Override
	public void run() {
		System.out.println("Hello World on " + Thread.currentThread());
	}
});

endsnippet

snippet frame "new JFrame()" !b
JFrame frame = new JFrame();
frame.setTitle("$1");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.getContentPane().add(mainWidget, BorderLayout.CENTER);
frame.pack();
frame.setVisible(true);

endsnippet

snippet dragsource "drag source" !b
DragSource ds = new DragSource();
DragGestureRecognizer dgr = ds.createDefaultDragGestureRecognizer(${1:theButton}, DnDConstants.ACTION_COPY, new DragGestureListener() {
	@Override
	public void dragGestureRecognized(DragGestureEvent dge) {
		Transferable transferable = new DataHandler(dataToTransfer, "application/x-ruben");
    dge.startDrag(DragSource.DefaultCopyDrop, transferable);
	}
});
endsnippet

snippet droptarget "Description" !
DropTarget dt = new DropTarget();
dt.setComponent(${1:theComponent});
dt.addDropTargetListener(new DropTargetAdapter() {
  @Override
  public void drop(DropTargetDropEvent dtde) {
    $0
    dtde.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);
    dtde.dropComplete(true);
  }
});
endsnippet

snippet invokelater "SwingUtilities.invokeLater(.." !b
Runnable runnable = new Runnable() {
	@Override
	public void run() {
		// System.out.println("Hello World on " + Thread.currentThread());
		$0
	}
};
if (SwingUtilities.isEventDispatchThread()) {
	runnable.run();
} else {
	SwingUtilities.invokeLater(runnable);
}
endsnippet

snippet edt "check if Event Dispath Thread" !b
if (SwingUtilities.isEventDispatchThread()) {
	runnable.run();
} else {
	SwingUtilities.invokeLater(runnable);
}

endsnippet

snippet runnable "new Runnable()" !b
Runnable runnable = new Runnable() {
	@Override
	public void run() {
		$0
	}
};

endsnippet

snippet stringinputstream "InputStream from String" !b
InputStream ${1:is} = new ByteArrayInputStream(${2:myString}.getBytes(StandardCharsets.UTF_8.name()));
endsnippet

snippet stringinputstream "InputStream from String (Apache Commons)" !b
InputStream ${1:is} = IOUtils.toInputStream(source, "UTF-8");
endsnippet

snippet importstandardcharsets "import ..." !b
import java.nio.charset.StandardCharsets;
endsnippet

snippet importbytearrayinputstream "import ..." !b
import java.io.ByteArrayInputStream;
endsnippet

snippet baos "ByteArrayOutputStream" w
ByteArrayOutputStream
endsnippet

snippet importkpl "imports for kinesis producer library" !b
import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
import com.amazonaws.services.kinesis.producer.Attempt;
import com.amazonaws.services.kinesis.producer.KinesisProducerConfiguration;
import com.amazonaws.services.kinesis.producer.KinesisProducer;
import com.amazonaws.services.kinesis.producer.UserRecordFailedException;
import com.amazonaws.services.kinesis.producer.UserRecordResult;
endsnippet

snippet kinesisproducer "new KinesisProducer with config" !b
KinesisProducerConfiguration config = new KinesisProducerConfiguration();
//config.setRegion(${1:"us-west-1"}); // if running on EC2 instance this will be read from metadata
//config.setCredentialsProvider(new DefaultAWSCredentialsProviderChain()); // this is the default
config.setMaxConnections(1);
config.setRequestTimeout(10000); // 10 seconds
config.setRecordMaxBufferedTime(15000); // buffer records up to 15 seconds
KinesisProducer producer = new KinesisProducer(config);
endsnippet

snippet fori "for (int i ; ; )" !b
for (int ${1:i} = 0; $1 < $2 ; $1++) {
	$0
}
endsnippet

snippet importbytebuffer "import ...ByteBuffer" !b
import java.nio.ByteBuffer;
endsnippet

snippet stormtopology "storm local topology" !b
//Topology definition
TopologyBuilder builder = new TopologyBuilder();
//builder.setSpout("word-reader",new WordReader());
//builder.setBolt("word-normalizer", new WordNormalizer())
//	.shuffleGrouping("word-reader");
//builder.setBolt("word-counter", new WordCounter(),2)
//	.fieldsGrouping("word-normalizer", new Fields("word"));

//Configuration
Config conf = new Config();
conf.put("wordsFile", args[0]);
conf.setDebug(false);

//Topology run
conf.put(Config.TOPOLOGY_MAX_SPOUT_PENDING, 1);
LocalCluster cluster = new LocalCluster();
cluster.submitTopology("Getting-Started-Toplogie", conf, builder.createTopology());
Thread.sleep(1000);
cluster.shutdown();
endsnippet
 
snippet importstorm "Description" !b
import org.apache.storm.Config;
import org.apache.storm.LocalCluster;
import org.apache.storm.topology.TopologyBuilder;
endsnippet

snippet importkinesisspout "import kinesis-storm-spout" !b
import com.amazonaws.ClientConfiguration;
import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.kinesis.stormspout.DefaultKinesisRecordScheme;
import com.amazonaws.services.kinesis.stormspout.InitialPositionInStream;
import com.amazonaws.services.kinesis.stormspout.KinesisSpout;
import com.amazonaws.services.kinesis.stormspout.KinesisSpoutConfig;
endsnippet

snippet kinesisspout "Define a kinesis spout" !b
final KinesisSpoutConfig config =
	new KinesisSpoutConfig("kinesis-stream-name", "localhost:2181")
		.withZookeeperPrefix("kinesis_spout")
		.withKinesisRecordScheme(new DefaultKinesisRecordScheme())
		.withInitialPositionInStream(InitialPositionInStream.TRIM_HORIZON)
		.withRecordRetryLimit(3)
		.withRegion(Regions.AP_NORTHEAST_1);

final KinesisSpout spout = new KinesisSpout(config, new CustomCredentialsProviderChain(), new ClientConfiguration());
TopologyBuilder builder = new TopologyBuilder();
//LOG.info("Using Kinesis stream: " + config.getStreamName());

// Using number of shards as the parallelism hint for the spout.
builder.setSpout("kinesis_spout", spout, 2);

endsnippet
