# https://github.com/honza/vim-snippets/blob/master/UltiSnips/java.snippets

# the vim-go plugins also contribute snippets to the go filetype from
# ~/.vim/bundle/vim-go/gosnippets/UltiSnips/go.snippets
# put the cursor over the filename and type gf to go to that file

# What does the !b means for ultisnips :help UltiSnips-snippet-options
# b   Beginning of line
# i   In-word expansion
# w   Word boundary
# r   Regular expression
# t   Do not expand tabs
# s   Remove whitespace immediately before the cursor at the end of a line
# m   Trim all whitespaces from right side of snippet lines. Useful when
# e   Context snippets
# A   Snippet will be triggered automatically, when condition matches.

global !p
from ultisnips_helpers import *
endglobal

# post_jump "expand(snip)"
# snippet httphandler "func xxxx(w http.ResponseWriter, req *http.Request" !b
# handler$1
# endsnippet

snippet pc "public class XXXX {...}" !b
public class ${1:HelloWorld} {
	$0
}
endsnippet

snippet psvm "public static void main(String[] args)" !b
public static void main(String[] args) {
	$0
}
endsnippet

snippet sol "System.out.println" w
System.out.println($1);$0
endsnippet

post_jump "expand(snip)"
snippet pl "println" !b
sol$1
endsnippet

snippet importdate "import all date related packages" !b
import java.time.format.DateTimeFormatter;
import java.time.OffsetDateTime;
endsnippet

snippet main "Write Main class"

public class Main {
	public static void main(String[] args) {
		System.out.println("Hello World");
	}
}
endsnippet

snippet unittest "JUnit 4 TestCase" !b
import org.junit.*;
import statis org.junit.Assert.*;

public class MyTest {
	@Test
	public void mytest() {
		assertTrue(true);
	}
}
endsnippet

snippet logger "SLF4J logger" !b
static Logger log = LoggerFactory.getLogger(MyClass.class);
endsnippet

snippet importslf4j "import slf4j" !b
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
endsnippet

snippet interface "public interface {...}" !b
public interface ${1:MyInterface} {
	$0
}
endsnippet

snippet javadoc "/** .." !b
/**
 * ${1:Gets the label}.
 * 
 * @param  list the list to be searched.
 * @param  key the key to be searched for.
 * @return the index of the search key, if it is contained in the list;
 *         otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
 *         <i>insertion point</i> is defined as the point at which the
 *         key would be inserted into the list: the index of the first
 *         element greater than the key, or <tt>list.size()</tt> if all
 *         elements in the list are less than the specified key.  Note
 *         that this guarantees that the return value will be &gt;= 0 if
 *         and only if the key is found.
 * @throws ClassCastException if the list contains elements that are not
 *         <i>mutually comparable</i> (for example, strings and
 *         integers), or the search key is not mutually comparable
 *         with the elements of the list.
 */

endsnippet

snippet importswing "Description" !b
import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;
import java.awt.dnd.*;
import javax.activation.*;
import java.awt.datatransfer.*;


endsnippet

snippet guiinit "Description" !b
SwingUtilities.invokeLater(new Runnable() { 
	@Override
	public void run() {
		System.out.println("Hello World on " + Thread.currentThread());
	}
});

endsnippet

snippet frame "new JFrame()" !b
JFrame frame = new JFrame();
frame.setTitle("$1");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.getContentPane().add(mainWidget, BorderLayout.CENTER);
frame.pack();
frame.setVisible(true);

endsnippet

snippet dragsource "drag source" !b
DragSource ds = new DragSource();
DragGestureRecognizer dgr = ds.createDefaultDragGestureRecognizer(${1:theButton}, DnDConstants.ACTION_COPY, new DragGestureListener() {
	@Override
	public void dragGestureRecognized(DragGestureEvent dge) {
		Transferable transferable = new DataHandler(dataToTransfer, "application/x-ruben");
    dge.startDrag(DragSource.DefaultCopyDrop, transferable);
	}
});
endsnippet

snippet droptarget "Description" !
DropTarget dt = new DropTarget();
dt.setComponent(${1:theComponent});
dt.addDropTargetListener(new DropTargetAdapter() {
  @Override
  public void drop(DropTargetDropEvent dtde) {
    $0
    dtde.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);
    dtde.dropComplete(true);
  }
});
endsnippet

snippet invokelater "SwingUtilities.invokeLater(.." !b
Runnable runnable = new Runnable() {
	@Override
	public void run() {
		// System.out.println("Hello World on " + Thread.currentThread());
		$0
	}
};
if (SwingUtilities.isEventDispatchThread()) {
	runnable.run();
} else {
	SwingUtilities.invokeLater(runnable);
}
endsnippet

snippet edt "check if Event Dispath Thread" !b
if (SwingUtilities.isEventDispatchThread()) {
	runnable.run();
} else {
	SwingUtilities.invokeLater(runnable);
}

endsnippet

snippet runnable "new Runnable()" !b
Runnable runnable = new Runnable() {
	@Override
	public void run() {
		$0
	}
};

endsnippet

snippet s2is "InputStream from String" !b
InputStream ${1:is} = new ByteArrayInputStream(${2:myString}.getBytes(StandardCharsets.UTF_8.name()));
endsnippet

snippet s2is2 "InputStream from String (Apache Commons)" !b
InputStream ${1:is} = IOUtils.toInputStream(source, "UTF-8");
endsnippet

snippet importstandardcharsets "import ..." !b
import java.nio.charset.StandardCharsets;
endsnippet

snippet importbytearrayinputstream "import ..." !b
import java.io.ByteArrayInputStream;
endsnippet

snippet baos "ByteArrayOutputStream" w
ByteArrayOutputStream
endsnippet

snippet importkpl "imports for kinesis producer library" !b
import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
import com.amazonaws.services.kinesis.producer.Attempt;
import com.amazonaws.services.kinesis.producer.KinesisProducerConfiguration;
import com.amazonaws.services.kinesis.producer.KinesisProducer;
import com.amazonaws.services.kinesis.producer.UserRecordFailedException;
import com.amazonaws.services.kinesis.producer.UserRecordResult;
endsnippet

snippet kinesisproducer "new KinesisProducer with config" !b
KinesisProducerConfiguration config = new KinesisProducerConfiguration();
//config.setRegion(${1:"us-west-1"}); // if running on EC2 instance this will be read from metadata
//config.setCredentialsProvider(new DefaultAWSCredentialsProviderChain()); // this is the default
config.setMaxConnections(1);
config.setRequestTimeout(10000); // 10 seconds
config.setRecordMaxBufferedTime(15000); // buffer records up to 15 seconds
KinesisProducer producer = new KinesisProducer(config);
endsnippet

snippet fori "for (int i ; ; )" !b
for (int ${1:i} = 0; $1 < $2 ; $1++) {
	$0
}
endsnippet

snippet importbytebuffer "import ...ByteBuffer" !b
import java.nio.ByteBuffer;
endsnippet

snippet stormtopology "storm local topology" !b
//Topology definition
TopologyBuilder builder = new TopologyBuilder();
//builder.setSpout("word-reader",new WordReader());
//builder.setBolt("word-normalizer", new WordNormalizer())
//	.shuffleGrouping("word-reader");
//builder.setBolt("word-counter", new WordCounter(),2)
//	.fieldsGrouping("word-normalizer", new Fields("word"));

//Configuration
Config conf = new Config();
conf.put("wordsFile", args[0]);
conf.setDebug(false);

//Topology run
conf.put(Config.TOPOLOGY_MAX_SPOUT_PENDING, 1);
LocalCluster cluster = new LocalCluster();
cluster.submitTopology("Getting-Started-Toplogie", conf, builder.createTopology());
Thread.sleep(1000);
cluster.shutdown();
endsnippet
 
snippet importstorm "import org.apache.storm..." !b
import org.apache.storm.Config;
import org.apache.storm.LocalCluster;
import org.apache.storm.topology.TopologyBuilder;
import org.apache.storm.Constants;
import org.apache.storm.task.OutputCollector;
import org.apache.storm.task.TopologyContext;
import org.apache.storm.topology.OutputFieldsDeclarer;
import org.apache.storm.topology.base.BaseRichBolt;
import org.apache.storm.tuple.Tuple;
import org.apache.storm.tuple.Fields;
endsnippet

snippet importkinesisspout "import kinesis-storm-spout" !b
import com.amazonaws.ClientConfiguration;
import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.kinesis.stormspout.DefaultKinesisRecordScheme;
import com.amazonaws.services.kinesis.stormspout.InitialPositionInStream;
import com.amazonaws.services.kinesis.stormspout.KinesisSpout;
import com.amazonaws.services.kinesis.stormspout.KinesisSpoutConfig;
endsnippet

snippet kinesisspout "Define a kinesis spout" !b
final KinesisSpoutConfig config =
	new KinesisSpoutConfig("kinesis-stream-name", "localhost:2181")
		.withZookeeperPrefix("kinesis_spout")
		.withKinesisRecordScheme(new DefaultKinesisRecordScheme())
		.withInitialPositionInStream(InitialPositionInStream.TRIM_HORIZON)
		.withRecordRetryLimit(3)
		.withRegion(Regions.AP_NORTHEAST_1);

final KinesisSpout spout = new KinesisSpout(config, new CustomCredentialsProviderChain(), new ClientConfiguration());
TopologyBuilder builder = new TopologyBuilder();
//LOG.info("Using Kinesis stream: " + config.getStreamName());

// Using number of shards as the parallelism hint for the spout.
builder.setSpout("kinesis_spout", spout, 2);
endsnippet

snippet importserializable "import java.io.Serializable" !b
import java.io.Serializable;
$0
endsnippet

snippet bolt "Generates a new Storm Bolt" !b

public class ${1:MyCustomBolt} extends BaseRichBolt {

	private OutputCollector outputCollector;
	
	@Override
	public Map<String, Object> getComponentConfiguration() {
		Config config = new Config();
		// send a tick tuple to this bolt every 10 secs
		//config.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, 10);
		return config;
	}
	
	@Override
	public void prepare(Map stormConf, TopologyContext topologyContext, OutputCollector outputCollector) {
		//Called when a task for this component is initialized within a worker on the cluster. It provides the bolt with the environment in which the bolt executes. 
		// stormConf: This is the configuration provided to the topology merged in with cluster configuration on this machine.
		// topologyContext: This object can be used to get information about this task's place within the topology, including the task id and component id of this task, input and output information, etc.
		// outputCollector is thread-safe and should be saved as an instance variable of this bolt object.
		this.outputCollector = outputCollector;
	}
	
	@Override
	public void execute(Tuple tuple) {
		if (isTickTuple(tuple)) {
			// periodic
		} else {
			// String partitionKey = tuple.getStringByField("partitionKey"); // assuming the incoming tuple has this field
			// TODO: insert logic here 
			//outputCollector.emit(new Values("fieldvalue1", "fielvalue2"), messageId);
			//outputCollector.ack(tuple);
		}
	}
	
	private boolean isTickTuple(Tuple tuple) {
		String sourceComponent = tuple.getSourceComponent();
		String sourceStreamId = tuple.getSourceStreamId();
		return sourceComponent.equals(Constants.SYSTEM_COMPONENT_ID) && sourceStreamId.equals(Constants.SYSTEM_TICK_STREAM_ID);
	}
	
	@Override
	public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer) {
		outputFieldsDeclarer.declare(new Fields("fieldname1", "fieldname2")); // tuples emitted by this bolt have this fields
	}
}

endsnippet

snippet importdynamodb "import com.amazonaws..." !b
import com.amazonaws.AmazonServiceException;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.AttributeAction;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.model.AttributeValueUpdate;
import com.amazonaws.services.dynamodbv2.model.ResourceNotFound;

import com.amazonaws.services.dynamodbv2.document.DynamoDB;
import com.amazonaws.services.dynamodbv2.document.Table;

import java.util.ArrayList;

endsnippet

snippet dynamoclient "AmazonDynamoDB ddb = ..." 
AmazonDynamoDB ddb = AmazonDynamoDBClientBuilder.defaultClient();
endsnippet

snippet dynamoput "ddb.putItem(..." !b
try {
	ddb.putItem(table_name, item_values);
} catch (ResourceNotFoundException e) {
	//System.err.format("Error: The table \"%s\" can't be found.\n", table_name);
	//System.exit(1);
} catch (AmazonServiceException e) {
	//System.err.println(e.getMessage());
	//System.exit(1);
}
endsnippet

snippet dynamoitemvalues "HashMap<String, AttributeValue> item_values = ..." !b
// https://github.com/awsdocs/aws-doc-sdk-examples/blob/311e1b6a6bba04cc3318487f372d4b1dc03cf009/java/example_code/dynamodb/src/main/java/aws/example/dynamodb/PutItem.java#L77-L89
HashMap<String, AttributeValue> item_values = new HashMap<String, AttributeValue>();

item_values.put("attrName",  new AttributeValue().withN("123.2");
endsnippet

snippet resource "this.getClass().getResourceAsStream(..."
InputStream is = this.getClass().getResourceAsStream("resource.txt"); // path begins at the this class, no leading /
endsnippet

snippet resource2string "resource to string" !b
// https://stackoverflow.com/a/6068228/90580
URL url = Resources.getResource("foo.txt");
String text = Resources.toString(url, Charsets.UTF_8);
endsnippet

snippet importjackson "import " !b
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
endsnippet

snippet sout "System.out.format(..." !b
System.out.format("%s:%d", myString, myNumber);
endsnippet

snippet tostring "public String toString() ..." !b
@Override
public String toString() {
	return "$0";
}
endsnippet

snippet stormspout "Creates a storm spout" !b


import org.apache.storm.topology.base.BaseRichSpout;
import org.apache.storm.tuple.Fields;
import org.apache.storm.topology.OutputFieldsDeclarer;
import org.apache.storm.task.TopologyContext ;
import org.apache.storm.spout.SpoutOutputCollector;


import java.util.Map;


public class MySpout extends BaseRichSpout {
  public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields("field1", "field2"));
  }


  public void open(Map conf, TopologyContext context, SpoutOutputCollector collector) {
      for(Object key: conf.keySet()) {
          System.out.format("%s:%s", key, conf.get(key));
      }
  }

  public void nextTuple() {
  }
}

endsnippet


snippet importsleep "import guava uninterruptibles" !b
import com.google.common.util.concurrent.Uninterruptibles;
import java.util.concurrent.TimeUnit;

endsnippet

snippet sleep "Guava sleep" !b
Uninterruptibles.sleepUninterruptibly(${1:1000}, TimeUnit.${2:MILLISECONDS});
endsnippet

snippet importinstant "import java.time.Instant" !b
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.Duration;

endsnippet

snippet uuid "create uuid" !b
final String workerId = InetAddress.getLocalHost().getCanonicalHostName() + ":" + UUID.randomUUID();
endsnippet

snippet importkcl "import kinesis client library" !b

import com.amazonaws.services.kinesis.clientlibrary.interfaces.v2.IRecordProcessor;
import com.amazonaws.services.kinesis.clientlibrary.interfaces.v2.IRecordProcessorFactory;
import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream;
import com.amazonaws.services.kinesis.clientlibrary.lib.worker.KinesisClientLibConfiguration;
import com.amazonaws.services.kinesis.clientlibrary.lib.worker.Worker;
import com.amazonaws.services.kinesis.clientlibrary.types.InitializationInput;
import com.amazonaws.services.kinesis.clientlibrary.types.ProcessRecordsInput;
import com.amazonaws.services.kinesis.clientlibrary.types.ShutdownInput;
import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
import com.amazonaws.services.kinesis.model.Record;


endsnippet

snippet try "try {} catch" !b
try {
	$0
} catch (Exception e) {
	throw new RuntimeException(e);
}

endsnippet

snippet awslambdahandler "AWS Lambda Handler class " !b
import java.io.InputStream;
import java.io.OutputStream;
import com.amazonaws.services.lambda.runtime.RequestStreamHandler;
import com.amazonaws.services.lambda.runtime.Context; 

public class Hello implements RequestStreamHandler{
	public static void handler(InputStream inputStream, OutputStream outputStream, Context context) throws IOException {
		int letter;
		while((letter = inputStream.read()) != -1)
		{
			outputStream.write(Character.toUpperCase(letter));
		}
	}
}
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;
import com.amazonaws.services.lambda.runtime.RequestStreamHandler;
import com.amazonaws.services.lambda.runtime.Context; 

// Depends on org.amazonaws:aws-lambda-java-core:1.2.0
public class AdasDynamoDb implements RequestStreamHandler{
	@Override
	public  void handleRequest(InputStream inputStream, OutputStream outputStream, Context context) throws IOException {
		int letter;
		while((letter = inputStream.read()) != -1)
		{
			outputStream.write(Character.toUpperCase(letter));
		}
	}
}
endsnippet

snippet dynamodbclient "Description" !b
AmazonDynamoDBClient ddb = AmazonDynamoDBClientBuilder.defaultClient();
DynamoDB dynamoDb = new DynamoDB(ddb); // Document interface: https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.SDKs.Interfaces.Document.html

endsnippet

snippet dynamodbquery "AWS DynamoDb Query code" !b
AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard()
.withRegion(Regions.US_WEST_2).build();
DynamoDB dynamoDB = new DynamoDB(client);

Table table = dynamoDB.getTable("Reply");

QuerySpec spec = new QuerySpec()
	.withKeyConditionExpression("Id = :v_id")
	.withValueMap(new ValueMap()
		.withString(":v_id", "Amazon DynamoDB#DynamoDB Thread 1"));

ItemCollection<QueryOutcome> items = table.query(spec);

Iterator<Item> iterator = items.iterator();
Item item = null;
while (iterator.hasNext()) {
	item = iterator.next();
	System.out.println(item.toJSONPretty());
}

endsnippet

snippet importbigdecimal "import java.math.BigDecimal" !b
import java.math.BigDecimal;
$0
endsnippet
# vim: set noexpandtab tabstop=2 :
