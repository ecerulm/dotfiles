
snippet basedir "basedir = os.path.abspath(...)" b
basedir = os.path.abspath(os.path.dirname(__file__))
endsnippet

snippet patchers "insert patchers" b 
with self.patchers_ok['os.listdir'], self.patchers_ok['os.environ'], self.patchers_ok['os.path']$0:
endsnippet

snippet property "create a property" b
@property
def ${1:property_name}(self):
	$0
	return self._$1
endsnippet

snippet len "wrap with len()"
len(${VISUAL})
endsnippet

#! header
snippet #! "Shebang header for python scripts" b
#!/usr/bin/env python
# encoding: utf-8
$0
endsnippet

snippet ifmain "ifmain" b
if __name__ == '__main__':
	${1:main()}$0
endsnippet

snippet for "for loop" b
for ${1:item} in ${2:iterable}:
	${3:pass}
endsnippet

snippet class "add a class" b
class ${1:MyClass}(${2:object}):

	def __init__(self$4):
		${5:pass}
endsnippet

snippet super "call superclass implementation" b
super(${1:CurrentClass}, self).${2:__init__}${0}
endsnippet

####################
# If / Else / Elif #
####################
snippet if "If" b
if ${1:condition}:
	${2:pass}
endsnippet

snippet ife "If / Else" b
if ${1:condition}:
	${2:pass}
else:
	${3:pass}
endsnippet

snippet ifee "If / Elif / Else" b
if ${1:condition}:
	${2:pass}
elif ${3:condition}:
	${4:pass}
else:
	${5:pass}
endsnippet

###############
# Def	/ imports
###############

snippet def "function with docstrings" b
def ${1:function}(self$2):
	${0:pass}
endsnippet

# doesn't expand when there is a word in front
snippet /(^|(?<=\W))\./ "self." r
self.
endsnippet

snippet from "from module import name" b
from ${1:module} import ${2:Stuff}
endsnippet

##########################
# Try / Except / Finally #
##########################
snippet try "Try / Except" b
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
endsnippet

snippet try "Try / Except / Else" b
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
else:
	${5:pass}
endsnippet

snippet try "Try / Except / Finally" b
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
finally:
	${5:pass}
endsnippet


#####################
# Assertions & Tests #
#####################


snippet test "Add skipped test" b
def $0test_xxx_should_do_xx_when_xxx(self):
	# Setup
	# Exercise SUT
	# Verify SUT state / behaviour
	# Teardown
	self.fail("Not implemented yet")

endsnippet

snippet pdb "Set PDB breakpoint" b
import pdb; pdb.set_trace()
endsnippet

snippet ipdb "Set IPDB breakpoint" b
import ipdb; ipdb.set_trace()
endsnippet

snippet pudb "Set PUDB breakpoint" b
import pudb; pudb.set_trace()
endsnippet

snippet ae "Assert equal" b
self.assertEqual(${1:first},${2:second})
endsnippet

snippet at "Assert True" b
self.assertTrue(${0:False})
endsnippet

snippet af "Assert False" b
self.assertFalse(${1:expression})
endsnippet

snippet aae "Assert almost equal" b
self.assertAlmostEqual(${1:first},${2:second})
endsnippet

snippet ar "Assert raises" b
self.assertRaises(${1:exception}, ${2:func}${3/.+/, /}${3:arguments})
endsnippet

snippet an "Assert is None" b
self.assertIsNone(${0:expression})
endsnippet

snippet ann "Assert is not None" b
self.assertIsNotNone(${0:expression})
endsnippet

snippet testcase "pyunit testcase" b
class Test${1:Class}(${2:unittest.TestCase}):

	def setUp(self):
		${4:pass}

	def tearDown(self):
		${5:pass}

	def test_${6:name}(self):
		${7:pass}
endsnippet

snippet	alltests "alltests.py suite" b
#!/usr/bin/env python
# encoding: utf-8


import unittest
import sys
sys.path.append('unittests')


modules_to_test = (
    'fooTest',
    'barTest',
    'bazTest',
)


def suite():
    alltests = unittest.TestSuite()
    for module in map(__import__, modules_to_test):
        alltests.addTests((unittest.findTestCases(module)))
    return alltests

if __name__ == '__main__':
    unittest.main(defaultTest='suite')
endsnippet

snippet cartesian "numpy cartesian function definition" s

import numpy as np

def cartesian(arrays, out=None):
    """
    Generate a cartesian product of input arrays.

    Parameters
    ----------
    arrays : list of array-like
        1-D arrays to form the cartesian product of.
    out : ndarray
        Array to place the cartesian product in.

    Returns
    -------
    out : ndarray
        2-D array of shape (M, len(arrays)) containing cartesian products
        formed of input arrays.

    Examples
    --------
    >>> cartesian(([1, 2, 3], [4, 5], [6, 7]))
    array([[1, 4, 6],
           [1, 4, 7],
           [1, 5, 6],
           [1, 5, 7],
           [2, 4, 6],
           [2, 4, 7],
           [2, 5, 6],
           [2, 5, 7],
           [3, 4, 6],
           [3, 4, 7],
           [3, 5, 6],
           [3, 5, 7]])

    """

    arrays = [np.asarray(x) for x in arrays]
    dtype = arrays[0].dtype

    n = np.prod([x.size for x in arrays])
    if out is None:
        out = np.zeros([n, len(arrays)], dtype=dtype)

    m = n / arrays[0].size
    out[:,0] = np.repeat(arrays[0], m)
    if arrays[1:]:
        cartesian(arrays[1:], out=out[0:m,1:])
        for j in xrange(1, arrays[0].size):
            out[j*m:(j+1)*m,1:] = out[0:m,1:]
    return out
endsnippet


snippet printerr "print('', file=sys.stderr)"
print('$1', file=sys.stderr)
endsnippet

snippet hexstring "string to hex bytes" w
":".join("{:02x}".format(ord(c)) for c in ${1:result})
endsnippet

snippet writefile "with open ... write"
with open(${1:filename}, "w") as ${2:f}:
	f.write($3)
endsnippet

snippet openfile "with open ... read"
with open(${1:filename}, "r") as ${2:f}:
	f.read()
endsnippet
# vim:ft=snippets:


