snippet inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}${0}
	return 0;
}
endsnippet

snippet wh "while loop"
while(${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

snippet shmopen "shmopen/mmap"
int r;

const char *memname = "sample";
const size_t region_size = sysconf(_SC_PAGE_SIZE);

printf("region_size = %zu\n", region_size);
int fd = shm_open(memname, O_CREAT | O_TRUNC | O_RDWR, 0666);
if(fd == -1)
  error_and_die("shm_open");

r = ftruncate(fd, region_size);
if(r != 0)
  error_and_die("ftruncate");

void *ptr = mmap(0, region_size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
if(ptr == MAP_FAILED)
  error_and_die("mmap");
close(fd);

pid_t pid = fork();

if (pid == 0) {
  u_long *d = (u_long *) ptr;
  *d = 0xdbeebee;
  exit(0);
}
else {
  int status;
  waitpid(pid, &status, 0);
  printf("child wrote %#lx\n", *(u_long *)ptr);
}

r = munmap(ptr, region_size);
if (r != 0)
  error_and_die("munmap");

r = shm_unlink(memname);
if(r != 0)
  error_and_die("shm_unlink");
endsnippet

snippet pthreadcreate "Create a new pthread"
pthread_t ${1:p};
/*  void child_main_func(void *arg) { return NULL;} */
pthread_create(&$1,/* attrs */ NULL, ${2:child_main_func}, /* void * arg */ NULL);
/* pthread_join($1,NULL); */
endsnippet


# http://en.wikipedia.org/wiki/Include_guard
snippet ifndef "#ifndef NAME_H Include Guards" b
#ifndef ${1:FILENAME}_H
#define $1_H
${0}
#endif /* $1_H */
endsnippet

snippet typedef "typedef struct {} name" b
typedef struct {
	$0
} ${1:name};
endsnippet

snippet struct "struct name {}" b
struct ${1:name} {
	$0;
};
endsnippet	

snippet enum "enum name {};" b
enum ${1:enumname} { ${2:VAL1}, ${3:VAL2}};
$0
endsnippet

snippet for "for loop"
int ${1:i};
for($1=0;i<${2:0};i++) {
	$0
}
endsnippet

snippet notimpl "Not Implemented error" b
printf("Not Implemented\n");
exit(EXIT_FAILURE);
endsnippet

snippet printf "printf with newline" b
printf("$1\n",$2);
$0
endsnippet

snippet	memset "memset (dest, value, size)" 
memset(${1:void *s}, ${2:int c}, ${3:size_t len});
$0
endsnippet


snippet incsocket "includes for sockets"
#include <errno.h>
#include <string.h> /* memset, etc */
#include <unistd.h> /* read(), write() */
#include <netdb.h>  /* _in_addr_t require by <netint/in.h> */
#include <sys/socket.h> /* recv, send, sendmsg, recvmsg */ 
#include <netinet/in.h> /* sockaddr_in_t */
#include <sys/uio.h> /* struct iovec */
$0
endsnippet
